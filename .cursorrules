# Instructions

As a profesionall AI programmer, you should always follow best practices of AI-Driven Agile Development (ADAP).

# Workflow

For any user request, you should
* analyze user request based on current documents and codebase
* prepare design document for current request
* DO NOT make code changes unless the design document is accepted by USER.

USER might use below shortcuts for fast reply:
* 1 - agree and go ahread
* 2 - disagree and try to find another approach
* 3 - start work on next task

## Stories

You should organize user request into one or more stories.
A story is a complete feature or functionality.

For each story, create an item in ./worklog/stories.md, like
```
# Stories
1. create project skeleton
2. setup database
```

Then create a story document(SD) in ./worklog folder, like "S01_proj_skeleton.md" or "S02_setup_db.md", with concise and informative filename.

Useful information about the story development should be recorded in the story document:
* user requirement
* system design
* tasks

## Tasks

Each story could be split into multiple tasks, and you should use the story file to record progress of each task.

Each task should be highly focused. For example, for a request like "refactor this method to make it faster and cleaner", you should split to two tasks, with the first one focused on performance only and the second one doing cosmetic changes.

New tasks could be added when story was first created, or when further steps are identified.

You should finish tasks one by one, and all proposed code changes should be limited to current task only.
Once the task is finished, you should create a new git commit for this task.
Only start working on next task after user confirmation.

Use todo markers to indicate the progress, e.g.
```
# Tasks
[X] Task 1
[ ] Task 2
```
Remember to update the progress of the task in the story file when it is finished.

The goal is to help you maintain a big picture as well as the progress of the story. Always refer to the story file when you plan the next step.

## Lessons

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `./worklog/lessons.md` so you will not make the same mistake again.


# Tools

You may use following tools to accomplish tasks when needed.

## Search Engine

You could use `curl` command to query google custom search.
`GOOGLE_SEARCH_ENGINE_ID` and `GOOGLE_API_KEY` are already defined as environment variable.

## Web Browser

You could use `curl` command along with `https://r.jina.ai` to get the text content of any URL.
e.g. `curl -s https://r.jina.ai/URL`

# Project Basics

This project is a next.js project, intended to run in Cloudflare Pages. It is created by `npm create cloudflare@latest -- my-app-status --framework=next` command.
* next.js version is 14.2.22
* this project will run in edge runtime, and the server should only use d1 database for data storage.

# Auth
Auth.js v5 will be used in this project to faciliate github login.

* All environment variable should starts with AUTH_, including AUTH_SECRET、AUTH_GITHUB_ID、AUTH_GITHUB_SECRET
* the main auth config file is src/auth.js, should look like:
    ```typescript
    import NextAuth from "next-auth"
    import GitHub from "next-auth/providers/github"

    export const { auth, handlers, signIn, signOut } = NextAuth({
        providers: [GitHub],
        secret: process.env.AUTH_SECRET,
        trustHost: true,
        session: {
            strategy: "jwt",  // Edge 环境必须使用 JWT
        },
    })
    ```

* API route src/app/api/auth/[...nextauth]/route.ts：
    ```typescript
    import { handlers } from "@/auth"
    export const { GET, POST } = handlers
    ```

* API auth in route：
    * use auth() insteadof getServerSession()
    ```typescript
    const session = await auth()
    if (!session) {
        return new Response("Unauthorized", { status: 401 })
    }

    return new Response(JSON.stringify(data), {
        status: 200,
        headers: {
            'Content-Type': 'application/json'
        }
    })
    ```

* Provider config：
    ```typescript
    'use client'
    import { SessionProvider } from "next-auth/react"

    export function Providers({ children }: { children: React.ReactNode }) {
        return <SessionProvider>{children}</SessionProvider>
    }
    ```




